@page "/recipe"
@using DTO.Article
@using DTO.Ingredient
@using DTO.Recipe
@using DTO.Unit
@using ServiceLayer
@using ShopAndEat.Models
@inject IRecipeService RecipeService
@inject IArticleService ArticleService
@inject IUnitService UnitService
@* TODO mu88: Build translator *@

<table style="width: 100%">
    <caption>Recipes</caption>
    <tr>
        <th>Name</th>
        <th />
    </tr>
    @foreach (var recipe in Recipes)
    {
        <tr>
            <td>@recipe.Name</td>
            <td><button class="btn btn-primary" @onclick="@(e => DeleteRecipe(recipe.RecipeId))">❌</button></td>
            <td><button class="btn btn-primary" @onclick="@(e => EditRecipe(recipe.RecipeId))">🖊</button></td>
        </tr>
    }
</table>

<EditForm Model="@_recipeModel" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <p>
        <label>
            Name:
            <InputText @bind-Value="_recipeModel.Name" />
        </label>
    </p>
    <p>
        <label>
            Number of Days:
            <InputNumber @bind-Value="_recipeModel.NumberOfDays" />
        </label>
    </p>
    <p>
        Ingredients:
        <table>
            <tr>
                <th>Quantity</th>
                <th>Unit</th>
                <th>Article</th>
            </tr>
            @for (var i = 0; i < NumberOfIngredients; i++)
            {
                var ingredientNumber = i;

                <tr>
                    <td>
                        <input type="number" step=0.1 min=0 @bind="@SelectedQuantities[ingredientNumber]" />
                    </td>
                    <td>
                        <select @bind="@SelectedUnitIds[ingredientNumber]">
                            <option>Choose Unit...</option>
                            @foreach (var unit in Units.OrderBy(x => x.Name))
                            {
                                <option value="@unit.UnitId">@unit.Name</option>
                            }
                        </select>
                    </td>
                    <td>
                        <select @bind="@SelectedArticleIds[ingredientNumber]">
                            <option>Choose Article...</option>
                            @foreach (var article in Articles.OrderBy(x => x.Name))
                            {
                                <option value="@article.ArticleId">@article.Name</option>
                            }
                        </select>
                    </td>
                </tr>
            }
        </table>
        <label @onclick="AddIngredient">Add another ingredient</label>
        <label @onclick="DeleteLastIngredient">Delete last ingredient</label>
    </p>

    <button type="submit">Save</button>
</EditForm>

@code {

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadRecipes();
        Units = UnitService.GetAllUnits();
        Articles = ArticleService.GetAllArticles();
        SelectedUnitIds = new List<int>();
        SelectedArticleIds = new List<int>();
        SelectedQuantities = new List<double>();
        AddIngredient();
    }

    private List<int> SelectedUnitIds { get; set; }

    private List<int> SelectedArticleIds { get; set; }

    private List<double> SelectedQuantities { get; set; }

    private IEnumerable<ExistingArticleDto> Articles { get; set; }

    private IEnumerable<ExistingUnitDto> Units { get; set; }

    private void LoadRecipes()
    {
        Recipes = RecipeService.GetAllRecipes();
    }

    private IEnumerable<ExistingRecipeDto> Recipes { get; set; }

    private int NumberOfIngredients => SelectedArticleIds.Count;

    private readonly RecipeModel _recipeModel = new RecipeModel();

    private void HandleSubmit()
    {
        if (_recipeModel.RecipeId == default)
        {
            var ingredients = new List<NewIngredientDto>();
            for (var i = 0; i < NumberOfIngredients; i++)
            {
                ingredients.Add(new NewIngredientDto(
                    Articles.Single(x => x.ArticleId == SelectedArticleIds[i]),
                    SelectedQuantities[i],
                    Units.Single(x => x.UnitId == SelectedUnitIds[i])));
            }

            var newRecipe = new NewRecipeDto(_recipeModel.Name, _recipeModel.NumberOfDays, ingredients);
            RecipeService.CreateNewRecipe(newRecipe);
        }
        else
        {
            var ingredients = new List<NewIngredientDto>();
            for (var i = 0; i < NumberOfIngredients; i++)
            {
                ingredients.Add(new NewIngredientDto(
                    Articles.Single(x => x.ArticleId == SelectedArticleIds[i]),
                    SelectedQuantities[i],
                    Units.Single(x => x.UnitId == SelectedUnitIds[i])));
            }

            var updatedRecipe = new UpdateRecipeDto(_recipeModel.Name, _recipeModel.NumberOfDays, ingredients, _recipeModel.RecipeId);
            RecipeService.UpdateRecipe(updatedRecipe);
        }

        LoadRecipes();
    }

    private void AddIngredient()
    {
        SelectedArticleIds.Add(default);
        SelectedQuantities.Add(default);
        SelectedUnitIds.Add(default);
    }

    private void DeleteLastIngredient()
    {
        var indexOfLastIngredient = NumberOfIngredients - 1;
        SelectedArticleIds.RemoveAt(indexOfLastIngredient);
        SelectedQuantities.RemoveAt(indexOfLastIngredient);
        SelectedUnitIds.RemoveAt(indexOfLastIngredient);
    }

    private void DeleteRecipe(int recipeId)
    {
        RecipeService.DeleteRecipe(new DeleteRecipeDto(recipeId));
        LoadRecipes();
    }

    private void EditRecipe(int recipeId)
    {
        var recipe = Recipes.Single(x => x.RecipeId == recipeId);
        _recipeModel.Name = recipe.Name;
        _recipeModel.NumberOfDays = recipe.NumberOfDays;
        SelectedArticleIds = recipe.Ingredients.Select(x => x.Article).Select(x => x.ArticleId).ToList();
        SelectedQuantities = recipe.Ingredients.Select(x => x.Quantity).ToList();
        SelectedUnitIds = recipe.Ingredients.Select(x => x.Unit).Select(x => x.UnitId).ToList();
        _recipeModel.RecipeId = recipe.RecipeId;
    }

}