@page "/"
@page "/meal"
@using ServiceLayer
@using DTO.Meal
@using DTO.MealType
@using DTO.PurchaseItem
@using DTO.Recipe
@using DTO.Store
@using ShopAndEat.Models
@inject IMealService MealService
@inject IStoreService StoreService
@inject IRecipeService RecipeService
@inject IMealTypeService MealTypeService
@inject IJSRuntime Js
@* TODO mu88: Build translator *@

<select @onchange="SelectedStoreChanged">
    @foreach (var store in Stores)
    {
        <option value="@store.Name">@store.Name</option>
    }
</select>

@if (SelectedStore == null)
{
    <button class="btn btn-primary" disabled>Get shopping list</button>
}
else
{
    <button class="btn btn-primary" @onclick="GetShoppingList">Get shopping list</button>
}

<hr>

<table class="table table-striped">
    <caption>Meal plan</caption>
    <thead>
    <tr>
        <th scope="col">Day</th>
        <th scope="col">Time</th>
        <th scope="col">Recipe</th>
        <th scope="col">Has been shopped</th>
        <th scope="col">Number of persons</th>
        <th scope="col"/>
        <th scope="col"/>
    </tr>
    </thead>
    <tbody>
    @foreach (var meal in Meals)
    {
        @if (meal.Day.Date == DateTime.Today)
        {
            <tr style="background-color:#00FF00">
                <td>@meal.Day.ToShortDateString() (@meal.Day.ToString("dddd"))</td>
                <td>@meal.MealType.Name</td>
                <td>@meal.Recipe.Name</td>
                <td>@meal.HasBeenShopped</td>
                <td>@meal.NumberOfPersons</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(_ => DeleteMeal(meal.MealId))">❌</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="@(_ => Toggle(meal.MealId))">🔃</button>
                </td>
            </tr>
        }
        else
        {
            <tr>
                <td>@meal.Day.ToShortDateString() (@meal.Day.ToString("dddd"))</td>
                <td>@meal.MealType.Name</td>
                <td>@meal.Recipe.Name</td>
                <td>@meal.HasBeenShopped</td>
                <td>@meal.NumberOfPersons</td>
                <td>
                    <button class="btn btn-primary" @onclick="@(_ => DeleteMeal(meal.MealId))">❌</button>
                </td>
                <td>
                    <button class="btn btn-primary" @onclick="@(_ => Toggle(meal.MealId))">🔃</button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<EditForm Model="@_mealModel" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <p>
        <label>
            Recipe:
            <select @onchange="SelectedRecipeChanged">
                <option>Choose Recipe...</option>
                @foreach (var recipe in Recipes.OrderBy(x => x.Name))
                {
                    <option value="@recipe.Name">@recipe.Name</option>
                }
            </select>
        </label>
    </p>
    <p>
        <label>
            Meal type:
            <InputSelect @bind-Value="_mealModel.MealTypeName">
                <option>Choose Meal Type...</option>
                @foreach (var mealType in MealTypes.OrderBy(x => x.Name))
                {
                    <option value="@mealType.Name">@mealType.Name</option>
                }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Date:
            <InputDate @bind-Value="_mealModel.Date"/>
        </label>
    </p>
    <p>
        <label>
            Number of Persons:
            <InputNumber @bind-Value="_mealModel.NumberOfPersons" />
        </label>
    </p>

    <button type="submit">Save</button>
</EditForm>

<hr>

@if (PurchaseItems.Any())
{
    <button class="btn btn-primary" @onclick="CopyToClipboardAsync">Copy to clipboard</button>
    <h2>Purchase items</h2>
    @foreach (var purchaseItem in PurchaseItems)
    {
        @purchaseItem.ToString()<br/>
    }
}



@code {

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadMeals();
        Recipes = RecipeService.GetAllRecipes();
        MealTypes = MealTypeService.GetAllMealTypes();
        PurchaseItems = new List<NewPurchaseItemDto>();
        Stores = StoreService.GetAllStores();
        SelectedStore = Stores.FirstOrDefault();
    }

    private void LoadMeals() => Meals = MealService.GetFutureMeals().ToList();

    private IEnumerable<ExistingMealDto> Meals { get; set; }

    private IEnumerable<ExistingMealTypeDto> MealTypes { get; set; }

    private IEnumerable<ExistingRecipeDto> Recipes { get; set; }

    private IEnumerable<NewPurchaseItemDto> PurchaseItems { get; set; }

    private IEnumerable<ExistingStoreDto> Stores { get; set; }

    private ExistingStoreDto SelectedStore { get; set; }

    private void GetShoppingList()
    {
        PurchaseItems = MealService.GetOrderedPurchaseItems(SelectedStore);
        LoadMeals();
    }

    private async Task CopyToClipboardAsync()
    {
        if (!PurchaseItems.Any()) { return; }

        await Js.InvokeVoidAsync("navigator.clipboard.writeText", string.Join(Environment.NewLine, PurchaseItems));
    }

    void SelectedStoreChanged(ChangeEventArgs e)
    {
        SelectedStore = Stores.Single(x => x.Name == e.Value?.ToString());
    }

    private readonly MealModel _mealModel = new();

    private void HandleSubmit()
    {
        var newMeal = new NewMealDto(_mealModel.Date,
            MealTypes.Single(x => x.Name == _mealModel.MealTypeName),
            Recipes.Single(x => x.Name == _mealModel.RecipeName),
            _mealModel.NumberOfPersons);
        MealService.CreateMeal(newMeal);
        LoadMeals();
    }

    private void DeleteMeal(int mealId)
    {
        MealService.DeleteMeal(new DeleteMealDto(mealId));
        LoadMeals();
    }
    
    private void Toggle(int mealId)
    {
        MealService.ToggleMeal(mealId);
        LoadMeals();
    }

    private void SelectedRecipeChanged(ChangeEventArgs e)
    {
        if (e.Value is string recipeName)
        {
            _mealModel.NumberOfPersons = Recipes.Single(recipe => recipe.Name == recipeName).NumberOfPersons;
            _mealModel.RecipeName = recipeName;
            StateHasChanged();
        }
    }

}