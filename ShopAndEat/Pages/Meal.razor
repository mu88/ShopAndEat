@page "/meal"
@using DTO.Meal
@using DTO.MealType
@using DTO.PurchaseItem
@using DTO.Recipe
@using DTO.Store
@using ServiceLayer
@using ShopAndEat.Models
@inject IMealService MealService
@inject IStoreService StoreService
@inject IRecipeService RecipeService
@inject IMealTypeService MealTypeService
@* TODO mu88: Build translator *@

<table style="width: 100%">
    <caption>Meal plan</caption>
    <tr>
        <th>Day</th>
        <th>Time</th>
        <th>Recipe</th>
        <th>Has been shopped</th>
    </tr>
    @foreach (var meal in Meals)
    {
        @if (meal.Day.Date == DateTime.Today)
        {
            <tr style="background-color:#00FF00">
                <td>@meal.Day.ToShortDateString()</td>
                <td>@meal.MealType.Name</td>
                <td>@meal.Recipe.Name</td>
                <td>@meal.HasBeenShopped</td>
            </tr>
        }
        else
        {
            <tr>
                <td>@meal.Day.ToShortDateString()</td>
                <td>@meal.MealType.Name</td>
                <td>@meal.Recipe.Name</td>
                <td>@meal.HasBeenShopped</td>
            </tr>
        }
    }
</table>

<EditForm Model="@_mealModel" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <p>
        <label>
            Recipe:
            <InputSelect @bind-Value="_mealModel.RecipeName">
                <option>Choose Recipe...</option>
                @foreach (var recipe in Recipes.OrderBy(x => x.Name))
                {
                    <option value="@recipe.Name">@recipe.Name</option>
                }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Meal type:
            <InputSelect @bind-Value="_mealModel.MealTypeName">
                <option>Choose Meal Type...</option>
                @foreach (var mealType in MealTypes.OrderBy(x => x.Name))
                {
                    <option value="@mealType.Name">@mealType.Name</option>
                }
            </InputSelect>
        </label>
    </p>
    <p>
        <label>
            Date:
            <InputDate @bind-Value="_mealModel.Date"/>
        </label>
    </p>

    <button type="submit">Submit</button>
</EditForm>


<select @onchange="SelectedStoreChanged">
    @foreach (var store in Stores)
    {
        <option value="@store.Name">@store.Name</option>
    }
</select>

@if (SelectedStore == null)
{
    <button class="btn btn-primary" disabled>Get shopping list</button>
}
else
{
    <button class="btn btn-primary" @onclick="GetShoppingList">Get shopping list</button>
}

@if (PurchaseItems.Any())
{
    <h2>Purchase items</h2>
    <ul>
        @foreach (var purchaseItem in PurchaseItems)
        {
            @if (purchaseItem.Unit.Name == "Stück")
            {
                <li>@purchaseItem.Quantity @purchaseItem.Article.Name</li>
            }
            else
            {
                <li>@purchaseItem.Quantity @purchaseItem.Unit.Name @purchaseItem.Article.Name</li>
            }
        }
    </ul>
}



@code {

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadMeals();
        Recipes = RecipeService.GetAllRecipes();
        MealTypes = MealTypeService.GetAllMealTypes();
        PurchaseItems = new List<NewPurchaseItemDto>();
        Stores = StoreService.GetAllStores();
        SelectedStore = Stores.FirstOrDefault();
    }

    private void LoadMeals()
    {
        Meals = MealService.GetFutureMeals().ToList();
        if (Meals.Any())
        {
            _mealModel.MealTypeName = Meals.First().MealType.Name;
            _mealModel.RecipeName = Meals.First().Recipe.Name;
            _mealModel.Date = Meals.First().Day;
        }
    }

    private IEnumerable<ExistingMealDto> Meals { get; set; }

    private IEnumerable<ExistingMealTypeDto> MealTypes { get; set; }

    private IEnumerable<ExistingRecipeDto> Recipes { get; set; }

    private IEnumerable<NewPurchaseItemDto> PurchaseItems { get; set; }

    private IEnumerable<ExistingStoreDto> Stores { get; set; }

    private ExistingStoreDto SelectedStore { get; set; }

    private void GetShoppingList()
    {
        PurchaseItems = MealService.GetOrderedPurchaseItems(SelectedStore);
        LoadMeals();
    }

    void SelectedStoreChanged(ChangeEventArgs e)
    {
        SelectedStore = Stores.Single(x => x.Name == e.Value.ToString());
    }

    private readonly MealModel _mealModel = new MealModel();

    private void HandleSubmit()
    {
        var newMeal = new NewMealDto(_mealModel.Date, 
            MealTypes.Single(x => x.Name == _mealModel.MealTypeName), 
            Recipes.Single(x => x.Name == _mealModel.RecipeName));
        MealService.CreateMeal(newMeal);
        LoadMeals();
    }

}