@page "/recipe2"
@using DTO.Article
@using DTO.ArticleGroup
@using DTO.Ingredient
@using DTO.Recipe
@using DTO.Unit
@using ServiceLayer
@using ShopAndEat.Models
@inject IRecipeService RecipeService
@inject IArticleService ArticleService
@inject IArticleGroupService ArticleGroupService
@inject IUnitService UnitService
@* TODO mu88: Build translator *@

<table style="width: 100%">
    <caption>Recipes</caption>
    <tr>
        <th>Name</th>
        <th />
    </tr>
    @foreach (var recipe in Recipes)
    {
<tr>
    <td>@recipe.Name</td>
    <td><button class="btn btn-primary" @onclick="@(e => DeleteRecipe(recipe.RecipeId))">❌</button></td>
</tr>
    }
</table>

<EditForm Model="@_recipeModel" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <p>
        <label>
            Name:
            <InputText @bind-Value="_recipeModel.Name"/>
        </label>
    </p>
    <p>
        <label>
            Number of Days:
            <InputNumber @bind-Value="_recipeModel.NumberOfDays"/>
        </label>
    </p>
    <p>
        Ingredients:
        <table>
            <tr>
                <th>Quantity</th>
                <th>Unit</th>
                <th>Article Name</th>
                <th>Article Group</th>
                <th>Article Is Inventory</th>
            </tr>
            @for (var i = 0; i < NumberOfIngredients; i++)
            {
                var ingredientNumber = i;

                <tr>
                    <td>
                        <input type="number" step=0.1 min=0 @onchange="@(e => QuantityChanged(e, ingredientNumber))" />
                    </td>
                    <td>
                        <select @onchange="@(e => UnitChanged(e, ingredientNumber))">
                            <option>Choose Unit...</option>
                            @foreach (var unit in Units.OrderBy(x => x.Name))
                            {
                                <option value="@unit.UnitId">@unit.Name</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="text" @onchange="@(e => ArticleNameChanged(e, ingredientNumber))" />
                    </td>
                    <td>
                        <select @onchange="@(e => ArticleGroupChanged(e, ingredientNumber))">
                            <option>Choose Article Group...</option>
                            @foreach (var articleGroup in ArticleGroups.OrderBy(x => x.Name))
                            {
                                <option value="@articleGroup.ArticleGroupId">@articleGroup.Name</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="checkbox" @onchange="@(e => ArticleIsInventoryChanged(e, ingredientNumber))" />
                    </td>
                </tr>
            }
        </table>
        <label @onclick="AddIngredient">Add another ingredient</label>
        <label @onclick="DeleteLastIngredient">Delete last ingredient</label>
    </p>

    <button type="submit">Submit</button>
</EditForm>

@code {

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();

        LoadRecipes();
        Units = UnitService.GetAllUnits();
        ArticleGroups = ArticleGroupService.GetAllArticleGroups();
        NumberOfIngredients = 1;
    }

    private IEnumerable<ExistingArticleGroupDto> ArticleGroups { get; set; }

    private IEnumerable<ExistingUnitDto> Units { get; set; }

    private void LoadRecipes()
    {
        Recipes = RecipeService.GetAllRecipes();
    }

    private IEnumerable<ExistingRecipeDto> Recipes { get; set; }

    private int NumberOfIngredients { get; set; }

    private readonly RecipeModel2 _recipeModel = new RecipeModel2();

    private void HandleSubmit()
    {
        var ingredients = new List<NewIngredientDto>();
        for (var i = 0; i < NumberOfIngredients; i++)
        {
            if (_recipeModel.IngredientArticleNames[i] == default)
            {
                continue;
            }

            var newArticle = new NewArticleDto(
            _recipeModel.IngredientArticleNames[i],
            ArticleGroups.Single(x=>x.ArticleGroupId==_recipeModel.IngredientArticleGroupIds[i]),
            _recipeModel.IngredientArticleIsInventories[i]);
            var createdArticle = ArticleService.CreateArticle(newArticle);

            ingredients.Add(new NewIngredientDto(
                createdArticle,
                _recipeModel.IngredientQuantities[i],
                Units.Single(x => x.UnitId == _recipeModel.IngredientUnitIds[i])));
        }

        var newRecipe = new NewRecipeDto(_recipeModel.Name, _recipeModel.NumberOfDays, ingredients);
        RecipeService.CreateNewRecipe(newRecipe);

        LoadRecipes();
    }

    private void AddIngredient()
    {
        NumberOfIngredients++;
    }

    private void DeleteLastIngredient()
    {
        _recipeModel.DeleteIngredient(NumberOfIngredients--);
    }

    private void QuantityChanged(ChangeEventArgs e, int ingredientNumber)
    {
        _recipeModel.IngredientQuantities[ingredientNumber] = Convert.ToDouble(e.Value);
    }

    private void UnitChanged(ChangeEventArgs e, int ingredientNumber)
    {
        _recipeModel.IngredientUnitIds[ingredientNumber] = Convert.ToInt32(e.Value);
    }

    private void ArticleNameChanged(ChangeEventArgs e, int ingredientNumber)
    {
        _recipeModel.IngredientArticleNames[ingredientNumber] = e.Value.ToString();
    }

    private void ArticleGroupChanged(ChangeEventArgs e, int ingredientNumber)
    {
        _recipeModel.IngredientArticleGroupIds[ingredientNumber] = Convert.ToInt32(e.Value);
    }

    private void ArticleIsInventoryChanged(ChangeEventArgs e, int ingredientNumber)
    {
        _recipeModel.IngredientArticleIsInventories[ingredientNumber] = Convert.ToBoolean(e.Value);
    }

    private void DeleteRecipe(int recipeId)
    {
        RecipeService.DeleteRecipe(new DeleteRecipeDto(recipeId));
        LoadRecipes();
    }

}